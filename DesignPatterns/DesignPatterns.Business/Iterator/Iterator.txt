
设计模式之美：Iterator（迭代器）
实现
        实现方式（一）：Iterator 模式结构样式代码。
        实现方式（二）：实现 IEnumerable 中序遍历二叉树。
        实现方式（三）：实现 BidirectionalConcurrentDictionary 双向并发字典。
        实现方式（四）：实现 RoundRobin 循环列表。

意图

提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。

Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

结构

参与者

Iterator

    迭代器定义访问和遍历元素的接口。

ConcreteIterator

    具体迭代器实现迭代器接口。
    对该聚合遍历时跟踪当前位置。

Aggregate

    聚合定义创建相应迭代器对象的接口。

ConcreteAggregate

    具体聚合实现创建相应迭代器的接口，该操作返回 ConreteIterator 的实例。

适用性

在以下情况下可以使用 Iterator 模式：

    访问一个聚合对象的内容而无需暴露它的内部表示。
    支持对聚合对象的多种遍历。
    为遍历不同的聚合结构提供一个统一的接口。

效果

    它支持以不同的方式遍历一个聚合。
    迭代器简化了聚合的接口。
    在同一个聚合上可以有多个遍历。

相关模式

    Iterator 常被应用到 Composite 这样的递归结构上。
    可以使用 Factory Method 模式来实例化多态迭代器。
    Iterator 可以使用 Memento 来捕获一个迭代的状态，在内部存储 Memento。
