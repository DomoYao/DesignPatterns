 
设计模式之美：Interpreter（解释器）

索引

    实现
        实现方式（一）：Interpreter 模式结构样式代码。
        实现方式（二）：解释波兰表达式（Polish Notation）。

意图

给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。

Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.

结构

参与者

AbstractExpression 

    声明一个抽象的解释操作，这个接口为抽象语法树中所有的节点所共享。

TerminalExpression

    实现与文法中的终结符相关联的解释操作。
    一个句子中的每一个终结符需要该类的一个实例。

NonterminalExpression

    对文法中的规则的解释操作。

Context

    包含解释器之外的一些全局信息。

Client

    构建表示该语法定义的语言中一个特定的句子的抽象语法树。
    调用解释操作

适用性

当有个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时，可以使用 Interpreter 模式。

当存在以下情况时效果最好：

    该文法简单对于复杂的文法，文法的类层次变得庞大而无法管理。
    效率不是一个关键问题，最高效的解释器通常不是通过直接解释语法分析树实现的，而是首先将它们转换成另一种形式。

效果

    易于改变和扩展文法。
    易于实现文法。
    复杂的文法难以维护。
    增加了新的解释表达式的方式。

相关模式

    抽象语法树是一个 Composite 模式的实例。
    可以使用 Flyweight 模式在抽象语法树中共享终结符。
    可以使用 Iterator 模式遍历解释器结构。
    可以使用 Visitor 模式在一个类中维护抽象语法树中的各个节点的行为。
