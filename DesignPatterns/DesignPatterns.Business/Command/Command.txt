
设计模式之美：Command（命令）

索引
   
    实现
        实现方式（一）：直接注入 Receiver 对象，Command 决定调用哪个方法。
        实现方式（二）：注入 Receiver 的指定方法，Command 仅能调用该方法。
        实现方式（三）：参数化 Command 构造。
        实现方式（四）：使用泛型减少 Command 子类。
        实现方式（五）：使用弱引用代替对 Receiver 的强引用。
        实现方式（六）：使 Command 支持 Undo 和 Redo。
        实现方式（七）：使 MacroCommand 来管理 Command 序列。

别名

    Action
    Transaction

意图

将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。

Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.

结构

参与者

Command

    声明 Execute 操作的接口。

ConcreteCommand

    将一个接收者对象绑定于一个动作。
    调用接收者相应的操作，以实现 Execute。

Client

    创建一个具体 Command 对象并设定它的接收者。

Invoker

    要求 Command 执行请求。

Receiver

    知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者。

适用性

在以下情况下可以使用 Command 模式：

    Command 模式是回调（callback）机制的一个面向对象的替代品。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。
    在不同的时刻指定、排列和执行请求。Command 对象可以有一个与初始请求无关的生存期。
    支持取消操作。需要定义 Unexecute 操作来取消 Execute 操作调用的效果。
    支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。
    用构建在原语操作上的高层操作构造一个系统。例如构建事务（Transaction）系统。

效果

    Command 模式将调用操作的对象与知道如何实现该操作的对象解耦。
    Command 是 first-class 对象。它们可像其他的对象一样被操纵和扩展。
    可以将多个 Command 装配成一个复合 Command。
    增加新的 Command 很容易，因为无需改变已有的类

相关模式

    Composite 模式可被用来实现 MacroCommand。
    Memento 模式可用来保持某个状态，Command 用这一状态来取消它的效果。
    可以使用 Prototype 来拷贝 Command 对象。
